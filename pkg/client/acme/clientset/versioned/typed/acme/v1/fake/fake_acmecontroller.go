// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	acmev1 "github.com/tnozicka/openshift-acme/pkg/api/acme/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeACMEControllers implements ACMEControllerInterface
type FakeACMEControllers struct {
	Fake *FakeAcmeV1
}

var acmecontrollersResource = schema.GroupVersionResource{Group: "acme.openshift.io", Version: "v1", Resource: "acmecontrollers"}

var acmecontrollersKind = schema.GroupVersionKind{Group: "acme.openshift.io", Version: "v1", Kind: "ACMEController"}

// Get takes name of the aCMEController, and returns the corresponding aCMEController object, and an error if there is any.
func (c *FakeACMEControllers) Get(ctx context.Context, name string, options v1.GetOptions) (result *acmev1.ACMEController, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(acmecontrollersResource, name), &acmev1.ACMEController{})
	if obj == nil {
		return nil, err
	}
	return obj.(*acmev1.ACMEController), err
}

// List takes label and field selectors, and returns the list of ACMEControllers that match those selectors.
func (c *FakeACMEControllers) List(ctx context.Context, opts v1.ListOptions) (result *acmev1.ACMEControllerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(acmecontrollersResource, acmecontrollersKind, opts), &acmev1.ACMEControllerList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &acmev1.ACMEControllerList{ListMeta: obj.(*acmev1.ACMEControllerList).ListMeta}
	for _, item := range obj.(*acmev1.ACMEControllerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested aCMEControllers.
func (c *FakeACMEControllers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(acmecontrollersResource, opts))
}

// Create takes the representation of a aCMEController and creates it.  Returns the server's representation of the aCMEController, and an error, if there is any.
func (c *FakeACMEControllers) Create(ctx context.Context, aCMEController *acmev1.ACMEController, opts v1.CreateOptions) (result *acmev1.ACMEController, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(acmecontrollersResource, aCMEController), &acmev1.ACMEController{})
	if obj == nil {
		return nil, err
	}
	return obj.(*acmev1.ACMEController), err
}

// Update takes the representation of a aCMEController and updates it. Returns the server's representation of the aCMEController, and an error, if there is any.
func (c *FakeACMEControllers) Update(ctx context.Context, aCMEController *acmev1.ACMEController, opts v1.UpdateOptions) (result *acmev1.ACMEController, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(acmecontrollersResource, aCMEController), &acmev1.ACMEController{})
	if obj == nil {
		return nil, err
	}
	return obj.(*acmev1.ACMEController), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeACMEControllers) UpdateStatus(ctx context.Context, aCMEController *acmev1.ACMEController, opts v1.UpdateOptions) (*acmev1.ACMEController, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(acmecontrollersResource, "status", aCMEController), &acmev1.ACMEController{})
	if obj == nil {
		return nil, err
	}
	return obj.(*acmev1.ACMEController), err
}

// Delete takes name of the aCMEController and deletes it. Returns an error if one occurs.
func (c *FakeACMEControllers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(acmecontrollersResource, name), &acmev1.ACMEController{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeACMEControllers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(acmecontrollersResource, listOpts)

	_, err := c.Fake.Invokes(action, &acmev1.ACMEControllerList{})
	return err
}

// Patch applies the patch and returns the patched aCMEController.
func (c *FakeACMEControllers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *acmev1.ACMEController, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(acmecontrollersResource, name, pt, data, subresources...), &acmev1.ACMEController{})
	if obj == nil {
		return nil, err
	}
	return obj.(*acmev1.ACMEController), err
}
